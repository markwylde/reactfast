{
  "version": 3,
  "sources": ["../node_modules/preact/hooks/src/index.js"],
  "sourcesContent": ["import { options } from 'preact';\n\n/** @type {number} */\nlet currentIndex;\n\n/** @type {import('./internal').Component} */\nlet currentComponent;\n\n/** @type {import('./internal').Component} */\nlet previousComponent;\n\n/** @type {number} */\nlet currentHook = 0;\n\n/** @type {Array<import('./internal').Component>} */\nlet afterPaintEffects = [];\n\nlet EMPTY = [];\n\nlet oldBeforeDiff = options._diff;\nlet oldBeforeRender = options._render;\nlet oldAfterDiff = options.diffed;\nlet oldCommit = options._commit;\nlet oldBeforeUnmount = options.unmount;\n\nconst RAF_TIMEOUT = 100;\nlet prevRaf;\n\noptions._diff = vnode => {\n\tcurrentComponent = null;\n\tif (oldBeforeDiff) oldBeforeDiff(vnode);\n};\n\noptions._render = vnode => {\n\tif (oldBeforeRender) oldBeforeRender(vnode);\n\n\tcurrentComponent = vnode._component;\n\tcurrentIndex = 0;\n\n\tconst hooks = currentComponent.__hooks;\n\tif (hooks) {\n\t\tif (previousComponent === currentComponent) {\n\t\t\thooks._pendingEffects = [];\n\t\t\tcurrentComponent._renderCallbacks = [];\n\t\t\thooks._list.forEach(hookItem => {\n\t\t\t\tif (hookItem._nextValue) {\n\t\t\t\t\thookItem._value = hookItem._nextValue;\n\t\t\t\t}\n\t\t\t\thookItem._pendingValue = EMPTY;\n\t\t\t\thookItem._nextValue = hookItem._pendingArgs = undefined;\n\t\t\t});\n\t\t} else {\n\t\t\thooks._pendingEffects.forEach(invokeCleanup);\n\t\t\thooks._pendingEffects.forEach(invokeEffect);\n\t\t\thooks._pendingEffects = [];\n\t\t}\n\t}\n\tpreviousComponent = currentComponent;\n};\n\noptions.diffed = vnode => {\n\tif (oldAfterDiff) oldAfterDiff(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks) {\n\t\tif (c.__hooks._pendingEffects.length) afterPaint(afterPaintEffects.push(c));\n\t\tc.__hooks._list.forEach(hookItem => {\n\t\t\tif (hookItem._pendingArgs) {\n\t\t\t\thookItem._args = hookItem._pendingArgs;\n\t\t\t}\n\t\t\tif (hookItem._pendingValue !== EMPTY) {\n\t\t\t\thookItem._value = hookItem._pendingValue;\n\t\t\t}\n\t\t\thookItem._pendingArgs = undefined;\n\t\t\thookItem._pendingValue = EMPTY;\n\t\t});\n\t}\n\tpreviousComponent = currentComponent = null;\n};\n\noptions._commit = (vnode, commitQueue) => {\n\tcommitQueue.some(component => {\n\t\ttry {\n\t\t\tcomponent._renderCallbacks.forEach(invokeCleanup);\n\t\t\tcomponent._renderCallbacks = component._renderCallbacks.filter(cb =>\n\t\t\t\tcb._value ? invokeEffect(cb) : true\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tcommitQueue.some(c => {\n\t\t\t\tif (c._renderCallbacks) c._renderCallbacks = [];\n\t\t\t});\n\t\t\tcommitQueue = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t});\n\n\tif (oldCommit) oldCommit(vnode, commitQueue);\n};\n\noptions.unmount = vnode => {\n\tif (oldBeforeUnmount) oldBeforeUnmount(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks) {\n\t\tlet hasErrored;\n\t\tc.__hooks._list.forEach(s => {\n\t\t\ttry {\n\t\t\t\tinvokeCleanup(s);\n\t\t\t} catch (e) {\n\t\t\t\thasErrored = e;\n\t\t\t}\n\t\t});\n\t\tc.__hooks = undefined;\n\t\tif (hasErrored) options._catchError(hasErrored, c._vnode);\n\t}\n};\n\n/**\n * Get a hook's state from the currentComponent\n * @param {number} index The index of the hook to get\n * @param {number} type The index of the hook to get\n * @returns {any}\n */\nfunction getHookState(index, type) {\n\tif (options._hook) {\n\t\toptions._hook(currentComponent, index, currentHook || type);\n\t}\n\tcurrentHook = 0;\n\n\t// Largely inspired by:\n\t// * https://github.com/michael-klein/funcy.js/blob/f6be73468e6ec46b0ff5aa3cc4c9baf72a29025a/src/hooks/core_hooks.mjs\n\t// * https://github.com/michael-klein/funcy.js/blob/650beaa58c43c33a74820a3c98b3c7079cf2e333/src/renderer.mjs\n\t// Other implementations to look at:\n\t// * https://codesandbox.io/s/mnox05qp8\n\tconst hooks =\n\t\tcurrentComponent.__hooks ||\n\t\t(currentComponent.__hooks = {\n\t\t\t_list: [],\n\t\t\t_pendingEffects: []\n\t\t});\n\n\tif (index >= hooks._list.length) {\n\t\thooks._list.push({ _pendingValue: EMPTY });\n\t}\n\treturn hooks._list[index];\n}\n\n/**\n * @param {import('./index').StateUpdater<any>} [initialState]\n */\nexport function useState(initialState) {\n\tcurrentHook = 1;\n\treturn useReducer(invokeOrReturn, initialState);\n}\n\n/**\n * @param {import('./index').Reducer<any, any>} reducer\n * @param {import('./index').StateUpdater<any>} initialState\n * @param {(initialState: any) => void} [init]\n * @returns {[ any, (state: any) => void ]}\n */\nexport function useReducer(reducer, initialState, init) {\n\t/** @type {import('./internal').ReducerHookState} */\n\tconst hookState = getHookState(currentIndex++, 2);\n\thookState._reducer = reducer;\n\tif (!hookState._component) {\n\t\thookState._value = [\n\t\t\t!init ? invokeOrReturn(undefined, initialState) : init(initialState),\n\n\t\t\taction => {\n\t\t\t\tconst currentValue = hookState._nextValue\n\t\t\t\t\t? hookState._nextValue[0]\n\t\t\t\t\t: hookState._value[0];\n\t\t\t\tconst nextValue = hookState._reducer(currentValue, action);\n\n\t\t\t\tif (currentValue !== nextValue) {\n\t\t\t\t\thookState._nextValue = [nextValue, hookState._value[1]];\n\t\t\t\t\thookState._component.setState({});\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\n\t\thookState._component = currentComponent;\n\n\t\tif (!currentComponent._hasScuFromHooks) {\n\t\t\tcurrentComponent._hasScuFromHooks = true;\n\t\t\tconst prevScu = currentComponent.shouldComponentUpdate;\n\n\t\t\t// This SCU has the purpose of bailing out after repeated updates\n\t\t\t// to stateful hooks.\n\t\t\t// we store the next value in _nextValue[0] and keep doing that for all\n\t\t\t// state setters, if we have next states and\n\t\t\t// all next states within a component end up being equal to their original state\n\t\t\t// we are safe to bail out for this specific component.\n\t\t\tcurrentComponent.shouldComponentUpdate = function(p, s, c) {\n\t\t\t\tif (!hookState._component.__hooks) return true;\n\n\t\t\t\tconst stateHooks = hookState._component.__hooks._list.filter(\n\t\t\t\t\tx => x._component\n\t\t\t\t);\n\t\t\t\tconst allHooksEmpty = stateHooks.every(x => !x._nextValue);\n\t\t\t\t// When we have no updated hooks in the component we invoke the previous SCU or\n\t\t\t\t// traverse the VDOM tree further.\n\t\t\t\tif (allHooksEmpty) {\n\t\t\t\t\treturn prevScu ? prevScu.call(this, p, s, c) : true;\n\t\t\t\t}\n\n\t\t\t\t// We check whether we have components with a nextValue set that\n\t\t\t\t// have values that aren't equal to one another this pushes\n\t\t\t\t// us to update further down the tree\n\t\t\t\tlet shouldUpdate = false;\n\t\t\t\tstateHooks.forEach(hookItem => {\n\t\t\t\t\tif (hookItem._nextValue) {\n\t\t\t\t\t\tconst currentValue = hookItem._value[0];\n\t\t\t\t\t\thookItem._value = hookItem._nextValue;\n\t\t\t\t\t\thookItem._nextValue = undefined;\n\t\t\t\t\t\tif (currentValue !== hookItem._value[0]) shouldUpdate = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn shouldUpdate || hookState._component.props !== p\n\t\t\t\t\t? prevScu\n\t\t\t\t\t\t? prevScu.call(this, p, s, c)\n\t\t\t\t\t\t: true\n\t\t\t\t\t: false;\n\t\t\t};\n\t\t}\n\t}\n\n\treturn hookState._nextValue || hookState._value;\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 3);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._pendingArgs = args;\n\n\t\tcurrentComponent.__hooks._pendingEffects.push(state);\n\t}\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useLayoutEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 4);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._pendingArgs = args;\n\n\t\tcurrentComponent._renderCallbacks.push(state);\n\t}\n}\n\nexport function useRef(initialValue) {\n\tcurrentHook = 5;\n\treturn useMemo(() => ({ current: initialValue }), []);\n}\n\n/**\n * @param {object} ref\n * @param {() => object} createHandle\n * @param {any[]} args\n */\nexport function useImperativeHandle(ref, createHandle, args) {\n\tcurrentHook = 6;\n\tuseLayoutEffect(\n\t\t() => {\n\t\t\tif (typeof ref == 'function') {\n\t\t\t\tref(createHandle());\n\t\t\t\treturn () => ref(null);\n\t\t\t} else if (ref) {\n\t\t\t\tref.current = createHandle();\n\t\t\t\treturn () => (ref.current = null);\n\t\t\t}\n\t\t},\n\t\targs == null ? args : args.concat(ref)\n\t);\n}\n\n/**\n * @param {() => any} factory\n * @param {any[]} args\n */\nexport function useMemo(factory, args) {\n\t/** @type {import('./internal').MemoHookState} */\n\tconst state = getHookState(currentIndex++, 7);\n\tif (argsChanged(state._args, args)) {\n\t\tstate._pendingValue = factory();\n\t\tstate._pendingArgs = args;\n\t\tstate._factory = factory;\n\t\treturn state._pendingValue;\n\t}\n\n\treturn state._value;\n}\n\n/**\n * @param {() => void} callback\n * @param {any[]} args\n */\nexport function useCallback(callback, args) {\n\tcurrentHook = 8;\n\treturn useMemo(() => callback, args);\n}\n\n/**\n * @param {import('./internal').PreactContext} context\n */\nexport function useContext(context) {\n\tconst provider = currentComponent.context[context._id];\n\t// We could skip this call here, but than we'd not call\n\t// `options._hook`. We need to do that in order to make\n\t// the devtools aware of this hook.\n\t/** @type {import('./internal').ContextHookState} */\n\tconst state = getHookState(currentIndex++, 9);\n\t// The devtools needs access to the context object to\n\t// be able to pull of the default value when no provider\n\t// is present in the tree.\n\tstate._context = context;\n\tif (!provider) return context._defaultValue;\n\t// This is probably not safe to convert to \"!\"\n\tif (state._value == null) {\n\t\tstate._value = true;\n\t\tprovider.sub(currentComponent);\n\t}\n\treturn provider.props.value;\n}\n\n/**\n * Display a custom label for a custom hook for the devtools panel\n * @type {<T>(value: T, cb?: (value: T) => string | number) => void}\n */\nexport function useDebugValue(value, formatter) {\n\tif (options.useDebugValue) {\n\t\toptions.useDebugValue(formatter ? formatter(value) : value);\n\t}\n}\n\n/**\n * @param {(error: any, errorInfo: import('preact').ErrorInfo) => void} cb\n */\nexport function useErrorBoundary(cb) {\n\t/** @type {import('./internal').ErrorBoundaryHookState} */\n\tconst state = getHookState(currentIndex++, 10);\n\tconst errState = useState();\n\tstate._value = cb;\n\tif (!currentComponent.componentDidCatch) {\n\t\tcurrentComponent.componentDidCatch = (err, errorInfo) => {\n\t\t\tif (state._value) state._value(err, errorInfo);\n\t\t\terrState[1](err);\n\t\t};\n\t}\n\treturn [\n\t\terrState[0],\n\t\t() => {\n\t\t\terrState[1](undefined);\n\t\t}\n\t];\n}\n\nexport function useId() {\n\tconst state = getHookState(currentIndex++, 11);\n\tif (!state._value) {\n\t\t// Grab either the root node or the nearest async boundary node.\n\t\t/** @type {import('./internal.d').VNode} */\n\t\tlet root = currentComponent._vnode;\n\t\twhile (root !== null && !root._mask && root._parent !== null) {\n\t\t\troot = root._parent;\n\t\t}\n\n\t\tlet mask = root._mask || (root._mask = [0, 0]);\n\t\tstate._value = 'P' + mask[0] + '-' + mask[1]++;\n\t}\n\n\treturn state._value;\n}\n/**\n * After paint effects consumer.\n */\nfunction flushAfterPaintEffects() {\n\tlet component;\n\twhile ((component = afterPaintEffects.shift())) {\n\t\tif (!component._parentDom || !component.__hooks) continue;\n\t\ttry {\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeCleanup);\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeEffect);\n\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t} catch (e) {\n\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t}\n}\n\nlet HAS_RAF = typeof requestAnimationFrame == 'function';\n\n/**\n * Schedule a callback to be invoked after the browser has a chance to paint a new frame.\n * Do this by combining requestAnimationFrame (rAF) + setTimeout to invoke a callback after\n * the next browser frame.\n *\n * Also, schedule a timeout in parallel to the the rAF to ensure the callback is invoked\n * even if RAF doesn't fire (for example if the browser tab is not visible)\n *\n * @param {() => void} callback\n */\nfunction afterNextFrame(callback) {\n\tconst done = () => {\n\t\tclearTimeout(timeout);\n\t\tif (HAS_RAF) cancelAnimationFrame(raf);\n\t\tsetTimeout(callback);\n\t};\n\tconst timeout = setTimeout(done, RAF_TIMEOUT);\n\n\tlet raf;\n\tif (HAS_RAF) {\n\t\traf = requestAnimationFrame(done);\n\t}\n}\n\n// Note: if someone used options.debounceRendering = requestAnimationFrame,\n// then effects will ALWAYS run on the NEXT frame instead of the current one, incurring a ~16ms delay.\n// Perhaps this is not such a big deal.\n/**\n * Schedule afterPaintEffects flush after the browser paints\n * @param {number} newQueueLength\n */\nfunction afterPaint(newQueueLength) {\n\tif (newQueueLength === 1 || prevRaf !== options.requestAnimationFrame) {\n\t\tprevRaf = options.requestAnimationFrame;\n\t\t(prevRaf || afterNextFrame)(flushAfterPaintEffects);\n\t}\n}\n\n/**\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeCleanup(hook) {\n\t// A hook cleanup can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\tlet cleanup = hook._cleanup;\n\tif (typeof cleanup == 'function') {\n\t\thook._cleanup = undefined;\n\t\tcleanup();\n\t}\n\n\tcurrentComponent = comp;\n}\n\n/**\n * Invoke a Hook's effect\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeEffect(hook) {\n\t// A hook call can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\thook._cleanup = hook._value();\n\tcurrentComponent = comp;\n}\n\n/**\n * @param {any[]} oldArgs\n * @param {any[]} newArgs\n */\nfunction argsChanged(oldArgs, newArgs) {\n\treturn (\n\t\t!oldArgs ||\n\t\toldArgs.length !== newArgs.length ||\n\t\tnewArgs.some((arg, index) => arg !== oldArgs[index])\n\t);\n}\n\nfunction invokeOrReturn(arg, f) {\n\treturn typeof f == 'function' ? f(arg) : f;\n}\n"],
  "mappings": "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",
  "names": ["currentIndex", "currentComponent", "previousComponent", "prevRaf", "currentHook", "afterPaintEffects", "EMPTY", "oldBeforeDiff", "options", "oldBeforeRender", "oldAfterDiff", "diffed", "oldCommit", "__c", "oldBeforeUnmount", "unmount", "getHookState", "index", "type", "__h", "hooks", "__H", "__", "length", "push", "__V", "useState", "initialState", "useReducer", "invokeOrReturn", "reducer", "init", "hookState", "_reducer", "action", "currentValue", "__N", "nextValue", "setState", "_hasScuFromHooks", "prevScu", "shouldComponentUpdate", "p", "s", "c", "stateHooks", "filter", "x", "every", "call", "this", "shouldUpdate", "forEach", "hookItem", "props", "useEffect", "callback", "args", "state", "__s", "argsChanged", "_pendingArgs", "flushAfterPaintEffects", "component", "afterPaintEffects", "shift", "__H", "forEach", "invokeCleanup", "invokeEffect", "__h", "e", "options", "__e", "__b", "vnode", "currentComponent", "oldBeforeDiff", "oldBeforeRender", "currentIndex", "hooks", "__c", "previousComponent", "__", "hookItem", "__N", "EMPTY", "_pendingArgs", "diffed", "oldAfterDiff", "c", "length", "push", "prevRaf", "requestAnimationFrame", "afterNextFrame", "__V", "commitQueue", "some", "filter", "cb", "__v", "oldCommit", "unmount", "oldBeforeUnmount", "hasErrored", "s", "HAS_RAF", "callback", "raf", "done", "clearTimeout", "timeout", "cancelAnimationFrame", "setTimeout", "hook", "comp", "cleanup", "argsChanged", "oldArgs", "newArgs", "arg", "index", "invokeOrReturn", "f"]
}
