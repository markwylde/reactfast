{
  "version": 3,
  "sources": ["../node_modules/preact/src/constants.js", "../node_modules/preact/src/util.js", "../node_modules/preact/src/options.js", "../node_modules/preact/src/create-element.js", "../node_modules/preact/src/component.js", "../node_modules/preact/src/create-context.js", "../node_modules/preact/src/diff/children.js", "../node_modules/preact/src/diff/props.js", "../node_modules/preact/src/diff/index.js", "../node_modules/preact/src/render.js", "../node_modules/preact/src/clone-element.js", "../node_modules/preact/src/diff/catch-error.js", "../src/components/Header.tsx"],
  "sourcesContent": ["export const EMPTY_OBJ = {};\nexport const EMPTY_ARR = [];\nexport const IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\n", "import { EMPTY_ARR } from \"./constants\";\n\n/**\n * Assign properties from `props` to `obj`\n * @template O, P The obj and props types\n * @param {O} obj The object to copy properties to\n * @param {P} props The object to copy properties from\n * @returns {O & P}\n */\nexport function assign(obj, props) {\n\t// @ts-ignore We change the type of `obj` to be `O & P`\n\tfor (let i in props) obj[i] = props[i];\n\treturn /** @type {O & P} */ (obj);\n}\n\n/**\n * Remove a child node from its parent if attached. This is a workaround for\n * IE11 which doesn't support `Element.prototype.remove()`. Using this function\n * is smaller than including a dedicated polyfill.\n * @param {Node} node The node to remove\n */\nexport function removeNode(node) {\n\tlet parentNode = node.parentNode;\n\tif (parentNode) parentNode.removeChild(node);\n}\n\nexport const slice = EMPTY_ARR.slice;\n", "import { _catchError } from './diff/catch-error';\n\n/**\n * The `option` object can potentially contain callback functions\n * that are called during various stages of our renderer. This is the\n * foundation on which all our addons like `preact/debug`, `preact/compat`,\n * and `preact/hooks` are based on. See the `Options` type in `internal.d.ts`\n * for a full list of available option hooks (most editors/IDEs allow you to\n * ctrl+click or cmd+click on mac the type definition below).\n * @type {import('./internal').Options}\n */\nconst options = {\n\t_catchError\n};\n\nexport default options;\n", "import { slice } from './util';\nimport options from './options';\n\nlet vnodeId = 0;\n\n/**\n * Create an virtual node (used for JSX)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * constructor for this virtual node\n * @param {object | null | undefined} [props] The properties of the virtual node\n * @param {Array<import('.').ComponentChildren>} [children] The children of the virtual node\n * @returns {import('./internal').VNode}\n */\nexport function createElement(type, props, children) {\n\tlet normalizedProps = {},\n\t\tkey,\n\t\tref,\n\t\ti;\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse normalizedProps[i] = props[i];\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\t// If a Component VNode, check for and apply defaultProps\n\t// Note: type may be undefined in development, must never error here.\n\tif (typeof type == 'function' && type.defaultProps != null) {\n\t\tfor (i in type.defaultProps) {\n\t\t\tif (normalizedProps[i] === undefined) {\n\t\t\t\tnormalizedProps[i] = type.defaultProps[i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn createVNode(type, normalizedProps, key, ref, null);\n}\n\n/**\n * Create a VNode (used internally by Preact)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * Constructor for this virtual node\n * @param {object | string | number | null} props The properties of this virtual node.\n * If this virtual node represents a text node, this is the text of the node (string or number).\n * @param {string | number | null} key The key for this virtual node, used when\n * diffing it against its children\n * @param {import('./internal').VNode[\"ref\"]} ref The ref property that will\n * receive a reference to its created child\n * @returns {import('./internal').VNode}\n */\nexport function createVNode(type, props, key, ref, original) {\n\t// V8 seems to be better at detecting type shapes if the object is allocated from the same call site\n\t// Do not inline into createElement and coerceToVNode!\n\tconst vnode = {\n\t\ttype,\n\t\tprops,\n\t\tkey,\n\t\tref,\n\t\t_children: null,\n\t\t_parent: null,\n\t\t_depth: 0,\n\t\t_dom: null,\n\t\t// _nextDom must be initialized to undefined b/c it will eventually\n\t\t// be set to dom.nextSibling which can return `null` and it is important\n\t\t// to be able to distinguish between an uninitialized _nextDom and\n\t\t// a _nextDom that has been set to `null`\n\t\t_nextDom: undefined,\n\t\t_component: null,\n\t\t_hydrating: null,\n\t\tconstructor: undefined,\n\t\t_original: original == null ? ++vnodeId : original\n\t};\n\n\t// Only invoke the vnode hook if this was *not* a direct copy:\n\tif (original == null && options.vnode != null) options.vnode(vnode);\n\n\treturn vnode;\n}\n\nexport function createRef() {\n\treturn { current: null };\n}\n\nexport function Fragment(props) {\n\treturn props.children;\n}\n\n/**\n * Check if a the argument is a valid Preact VNode.\n * @param {*} vnode\n * @returns {vnode is import('./internal').VNode}\n */\nexport const isValidElement = vnode =>\n\tvnode != null && vnode.constructor === undefined;\n", "import { assign } from './util';\nimport { diff, commitRoot } from './diff/index';\nimport options from './options';\nimport { Fragment } from './create-element';\n\n/**\n * Base Component class. Provides `setState()` and `forceUpdate()`, which\n * trigger rendering\n * @param {object} props The initial component props\n * @param {object} context The initial context from parent components'\n * getChildContext\n */\nexport function Component(props, context) {\n\tthis.props = props;\n\tthis.context = context;\n}\n\n/**\n * Update component state and schedule a re-render.\n * @this {import('./internal').Component}\n * @param {object | ((s: object, p: object) => object)} update A hash of state\n * properties to update with new values or a function that given the current\n * state and props returns a new partial state\n * @param {() => void} [callback] A function to be called once component state is\n * updated\n */\nComponent.prototype.setState = function(update, callback) {\n\t// only clone state when copying to nextState the first time.\n\tlet s;\n\tif (this._nextState != null && this._nextState !== this.state) {\n\t\ts = this._nextState;\n\t} else {\n\t\ts = this._nextState = assign({}, this.state);\n\t}\n\n\tif (typeof update == 'function') {\n\t\t// Some libraries like `immer` mark the current state as readonly,\n\t\t// preventing us from mutating it, so we need to clone it. See #2716\n\t\tupdate = update(assign({}, s), this.props);\n\t}\n\n\tif (update) {\n\t\tassign(s, update);\n\t}\n\n\t// Skip update if updater function returned null\n\tif (update == null) return;\n\n\tif (this._vnode) {\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Immediately perform a synchronous re-render of the component\n * @this {import('./internal').Component}\n * @param {() => void} [callback] A function to be called after component is\n * re-rendered\n */\nComponent.prototype.forceUpdate = function(callback) {\n\tif (this._vnode) {\n\t\t// Set render mode so that we can differentiate where the render request\n\t\t// is coming from. We need this because forceUpdate should never call\n\t\t// shouldComponentUpdate\n\t\tthis._force = true;\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n * Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n * @param {object} props Props (eg: JSX attributes) received from parent\n * element/component\n * @param {object} state The component's current state\n * @param {object} context Context object, as returned by the nearest\n * ancestor's `getChildContext()`\n * @returns {import('./index').ComponentChildren | void}\n */\nComponent.prototype.render = Fragment;\n\n/**\n * @param {import('./internal').VNode} vnode\n * @param {number | null} [childIndex]\n */\nexport function getDomSibling(vnode, childIndex) {\n\tif (childIndex == null) {\n\t\t// Use childIndex==null as a signal to resume the search from the vnode's sibling\n\t\treturn vnode._parent\n\t\t\t? getDomSibling(vnode._parent, vnode._parent._children.indexOf(vnode) + 1)\n\t\t\t: null;\n\t}\n\n\tlet sibling;\n\tfor (; childIndex < vnode._children.length; childIndex++) {\n\t\tsibling = vnode._children[childIndex];\n\n\t\tif (sibling != null && sibling._dom != null) {\n\t\t\t// Since updateParentDomPointers keeps _dom pointer correct,\n\t\t\t// we can rely on _dom to tell us if this subtree contains a\n\t\t\t// rendered DOM node, and what the first rendered DOM node is\n\t\t\treturn sibling._dom;\n\t\t}\n\t}\n\n\t// If we get here, we have not found a DOM node in this vnode's children.\n\t// We must resume from this vnode's sibling (in it's parent _children array)\n\t// Only climb up and search the parent if we aren't searching through a DOM\n\t// VNode (meaning we reached the DOM parent of the original vnode that began\n\t// the search)\n\treturn typeof vnode.type == 'function' ? getDomSibling(vnode) : null;\n}\n\n/**\n * Trigger in-place re-rendering of a component.\n * @param {import('./internal').Component} component The component to rerender\n */\nfunction renderComponent(component) {\n\tlet vnode = component._vnode,\n\t\toldDom = vnode._dom,\n\t\tparentDom = component._parentDom;\n\n\tif (parentDom) {\n\t\tlet commitQueue = [];\n\t\tconst oldVNode = assign({}, vnode);\n\t\toldVNode._original = vnode._original + 1;\n\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tvnode,\n\t\t\toldVNode,\n\t\t\tcomponent._globalContext,\n\t\t\tparentDom.ownerSVGElement !== undefined,\n\t\t\tvnode._hydrating != null ? [oldDom] : null,\n\t\t\tcommitQueue,\n\t\t\toldDom == null ? getDomSibling(vnode) : oldDom,\n\t\t\tvnode._hydrating\n\t\t);\n\t\tcommitRoot(commitQueue, vnode);\n\n\t\tif (vnode._dom != oldDom) {\n\t\t\tupdateParentDomPointers(vnode);\n\t\t}\n\t}\n}\n\n/**\n * @param {import('./internal').VNode} vnode\n */\nfunction updateParentDomPointers(vnode) {\n\tif ((vnode = vnode._parent) != null && vnode._component != null) {\n\t\tvnode._dom = vnode._component.base = null;\n\t\tfor (let i = 0; i < vnode._children.length; i++) {\n\t\t\tlet child = vnode._children[i];\n\t\t\tif (child != null && child._dom != null) {\n\t\t\t\tvnode._dom = vnode._component.base = child._dom;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn updateParentDomPointers(vnode);\n\t}\n}\n\n/**\n * The render queue\n * @type {Array<import('./internal').Component>}\n */\nlet rerenderQueue = [];\n\n/*\n * The value of `Component.debounce` must asynchronously invoke the passed in callback. It is\n * important that contributors to Preact can consistently reason about what calls to `setState`, etc.\n * do, and when their effects will be applied. See the links below for some further reading on designing\n * asynchronous APIs.\n * * [Designing APIs for Asynchrony](https://blog.izs.me/2013/08/designing-apis-for-asynchrony)\n * * [Callbacks synchronous and asynchronous](https://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/)\n */\n\nlet prevDebounce;\n\n/**\n * Enqueue a rerender of a component\n * @param {import('./internal').Component} c The component to rerender\n */\nexport function enqueueRender(c) {\n\tif (\n\t\t(!c._dirty &&\n\t\t\t(c._dirty = true) &&\n\t\t\trerenderQueue.push(c) &&\n\t\t\t!process._rerenderCount++) ||\n\t\tprevDebounce !== options.debounceRendering\n\t) {\n\t\tprevDebounce = options.debounceRendering;\n\t\t(prevDebounce || setTimeout)(process);\n\t}\n}\n\n/** Flush the render queue by rerendering all queued components */\nfunction process() {\n\tlet queue;\n\twhile ((process._rerenderCount = rerenderQueue.length)) {\n\t\tqueue = rerenderQueue.sort((a, b) => a._vnode._depth - b._vnode._depth);\n\t\trerenderQueue = [];\n\t\t// Don't update `renderCount` yet. Keep its value non-zero to prevent unnecessary\n\t\t// process() calls from getting scheduled while `queue` is still being consumed.\n\t\tqueue.some(c => {\n\t\t\tif (c._dirty) renderComponent(c);\n\t\t});\n\t}\n}\nprocess._rerenderCount = 0;\n", "import { enqueueRender } from './component';\n\nexport let i = 0;\n\nexport function createContext(defaultValue, contextId) {\n\tcontextId = '__cC' + i++;\n\n\tconst context = {\n\t\t_id: contextId,\n\t\t_defaultValue: defaultValue,\n\t\t/** @type {import('./internal').FunctionComponent} */\n\t\tConsumer(props, contextValue) {\n\t\t\t// return props.children(\n\t\t\t// \tcontext[contextId] ? context[contextId].props.value : defaultValue\n\t\t\t// );\n\t\t\treturn props.children(contextValue);\n\t\t},\n\t\t/** @type {import('./internal').FunctionComponent} */\n\t\tProvider(props) {\n\t\t\tif (!this.getChildContext) {\n\t\t\t\tlet subs = [];\n\t\t\t\tlet ctx = {};\n\t\t\t\tctx[contextId] = this;\n\n\t\t\t\tthis.getChildContext = () => ctx;\n\n\t\t\t\tthis.shouldComponentUpdate = function(_props) {\n\t\t\t\t\tif (this.props.value !== _props.value) {\n\t\t\t\t\t\t// I think the forced value propagation here was only needed when `options.debounceRendering` was being bypassed:\n\t\t\t\t\t\t// https://github.com/preactjs/preact/commit/4d339fb803bea09e9f198abf38ca1bf8ea4b7771#diff-54682ce380935a717e41b8bfc54737f6R358\n\t\t\t\t\t\t// In those cases though, even with the value corrected, we're double-rendering all nodes.\n\t\t\t\t\t\t// It might be better to just tell folks not to use force-sync mode.\n\t\t\t\t\t\t// Currently, using `useContext()` in a class component will overwrite its `this.context` value.\n\t\t\t\t\t\t// subs.some(c => {\n\t\t\t\t\t\t// \tc.context = _props.value;\n\t\t\t\t\t\t// \tenqueueRender(c);\n\t\t\t\t\t\t// });\n\n\t\t\t\t\t\t// subs.some(c => {\n\t\t\t\t\t\t// \tc.context[contextId] = _props.value;\n\t\t\t\t\t\t// \tenqueueRender(c);\n\t\t\t\t\t\t// });\n\t\t\t\t\t\tsubs.some(enqueueRender);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tthis.sub = c => {\n\t\t\t\t\tsubs.push(c);\n\t\t\t\t\tlet old = c.componentWillUnmount;\n\t\t\t\t\tc.componentWillUnmount = () => {\n\t\t\t\t\t\tsubs.splice(subs.indexOf(c), 1);\n\t\t\t\t\t\tif (old) old.call(c);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn props.children;\n\t\t}\n\t};\n\n\t// Devtools needs access to the context object when it\n\t// encounters a Provider. This is necessary to support\n\t// setting `displayName` on the context object instead\n\t// of on the component itself. See:\n\t// https://reactjs.org/docs/context.html#contextdisplayname\n\n\treturn (context.Provider._contextRef = context.Consumer.contextType = context);\n}\n", "import { diff, unmount, applyRef } from './index';\nimport { createVNode, Fragment } from '../create-element';\nimport { EMPTY_OBJ, EMPTY_ARR } from '../constants';\nimport { getDomSibling } from '../component';\n\n/**\n * Diff the children of a virtual node\n * @param {import('../internal').PreactElement} parentDom The DOM element whose\n * children are being diffed\n * @param {import('../internal').ComponentChildren[]} renderResult\n * @param {import('../internal').VNode} newParentVNode The new virtual\n * node whose children should be diff'ed against oldParentVNode\n * @param {import('../internal').VNode} oldParentVNode The old virtual\n * node whose children should be diff'ed against newParentVNode\n * @param {object} globalContext The current context object - modified by getChildContext\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\n * element any new dom elements should be placed around. Likely `null` on first\n * render (except when hydrating). Can be a sibling DOM element when diffing\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} isHydrating Whether or not we are in hydration\n */\nexport function diffChildren(\n\tparentDom,\n\trenderResult,\n\tnewParentVNode,\n\toldParentVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating\n) {\n\tlet i, j, oldVNode, childVNode, newDom, firstChildDom, refs;\n\n\t// This is a compression of oldParentVNode!=null && oldParentVNode != EMPTY_OBJ && oldParentVNode._children || EMPTY_ARR\n\t// as EMPTY_OBJ._children should be `undefined`.\n\tlet oldChildren = (oldParentVNode && oldParentVNode._children) || EMPTY_ARR;\n\n\tlet oldChildrenLength = oldChildren.length;\n\n\tnewParentVNode._children = [];\n\tfor (i = 0; i < renderResult.length; i++) {\n\t\tchildVNode = renderResult[i];\n\n\t\tif (childVNode == null || typeof childVNode == 'boolean') {\n\t\t\tchildVNode = newParentVNode._children[i] = null;\n\t\t}\n\t\t// If this newVNode is being reused (e.g. <div>{reuse}{reuse}</div>) in the same diff,\n\t\t// or we are rendering a component (e.g. setState) copy the oldVNodes so it can have\n\t\t// it's own DOM & etc. pointers\n\t\telse if (\n\t\t\ttypeof childVNode == 'string' ||\n\t\t\ttypeof childVNode == 'number' ||\n\t\t\t// eslint-disable-next-line valid-typeof\n\t\t\ttypeof childVNode == 'bigint'\n\t\t) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tnull,\n\t\t\t\tchildVNode,\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tchildVNode\n\t\t\t);\n\t\t} else if (Array.isArray(childVNode)) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tFragment,\n\t\t\t\t{ children: childVNode },\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tnull\n\t\t\t);\n\t\t} else if (childVNode._depth > 0) {\n\t\t\t// VNode is already in use, clone it. This can happen in the following\n\t\t\t// scenario:\n\t\t\t//   const reuse = <div />\n\t\t\t//   <div>{reuse}<span />{reuse}</div>\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tchildVNode.type,\n\t\t\t\tchildVNode.props,\n\t\t\t\tchildVNode.key,\n\t\t\t\tnull,\n\t\t\t\tchildVNode._original\n\t\t\t);\n\t\t} else {\n\t\t\tchildVNode = newParentVNode._children[i] = childVNode;\n\t\t}\n\n\t\t// Terser removes the `continue` here and wraps the loop body\n\t\t// in a `if (childVNode) { ... } condition\n\t\tif (childVNode == null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tchildVNode._parent = newParentVNode;\n\t\tchildVNode._depth = newParentVNode._depth + 1;\n\n\t\t// Check if we find a corresponding element in oldChildren.\n\t\t// If found, delete the array item by setting to `undefined`.\n\t\t// We use `undefined`, as `null` is reserved for empty placeholders\n\t\t// (holes).\n\t\toldVNode = oldChildren[i];\n\n\t\tif (\n\t\t\toldVNode === null ||\n\t\t\t(oldVNode &&\n\t\t\t\tchildVNode.key == oldVNode.key &&\n\t\t\t\tchildVNode.type === oldVNode.type)\n\t\t) {\n\t\t\toldChildren[i] = undefined;\n\t\t} else {\n\t\t\t// Either oldVNode === undefined or oldChildrenLength > 0,\n\t\t\t// so after this loop oldVNode == null or oldVNode is a valid value.\n\t\t\tfor (j = 0; j < oldChildrenLength; j++) {\n\t\t\t\toldVNode = oldChildren[j];\n\t\t\t\t// If childVNode is unkeyed, we only match similarly unkeyed nodes, otherwise we match by key.\n\t\t\t\t// We always match by type (in either case).\n\t\t\t\tif (\n\t\t\t\t\toldVNode &&\n\t\t\t\t\tchildVNode.key == oldVNode.key &&\n\t\t\t\t\tchildVNode.type === oldVNode.type\n\t\t\t\t) {\n\t\t\t\t\toldChildren[j] = undefined;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\toldVNode = null;\n\t\t\t}\n\t\t}\n\n\t\toldVNode = oldVNode || EMPTY_OBJ;\n\n\t\t// Morph the old element into the new one, but don't append it to the dom yet\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tchildVNode,\n\t\t\toldVNode,\n\t\t\tglobalContext,\n\t\t\tisSvg,\n\t\t\texcessDomChildren,\n\t\t\tcommitQueue,\n\t\t\toldDom,\n\t\t\tisHydrating\n\t\t);\n\n\t\tnewDom = childVNode._dom;\n\n\t\tif ((j = childVNode.ref) && oldVNode.ref != j) {\n\t\t\tif (!refs) refs = [];\n\t\t\tif (oldVNode.ref) refs.push(oldVNode.ref, null, childVNode);\n\t\t\trefs.push(j, childVNode._component || newDom, childVNode);\n\t\t}\n\n\t\tif (newDom != null) {\n\t\t\tif (firstChildDom == null) {\n\t\t\t\tfirstChildDom = newDom;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\ttypeof childVNode.type == 'function' &&\n\t\t\t\tchildVNode._children === oldVNode._children\n\t\t\t) {\n\t\t\t\tchildVNode._nextDom = oldDom = reorderChildren(\n\t\t\t\t\tchildVNode,\n\t\t\t\t\toldDom,\n\t\t\t\t\tparentDom\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\toldDom = placeChild(\n\t\t\t\t\tparentDom,\n\t\t\t\t\tchildVNode,\n\t\t\t\t\toldVNode,\n\t\t\t\t\toldChildren,\n\t\t\t\t\tnewDom,\n\t\t\t\t\toldDom\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (typeof newParentVNode.type == 'function') {\n\t\t\t\t// Because the newParentVNode is Fragment-like, we need to set it's\n\t\t\t\t// _nextDom property to the nextSibling of its last child DOM node.\n\t\t\t\t//\n\t\t\t\t// `oldDom` contains the correct value here because if the last child\n\t\t\t\t// is a Fragment-like, then oldDom has already been set to that child's _nextDom.\n\t\t\t\t// If the last child is a DOM VNode, then oldDom will be set to that DOM\n\t\t\t\t// node's nextSibling.\n\t\t\t\tnewParentVNode._nextDom = oldDom;\n\t\t\t}\n\t\t} else if (\n\t\t\toldDom &&\n\t\t\toldVNode._dom == oldDom &&\n\t\t\toldDom.parentNode != parentDom\n\t\t) {\n\t\t\t// The above condition is to handle null placeholders. See test in placeholder.test.js:\n\t\t\t// `efficiently replace null placeholders in parent rerenders`\n\t\t\toldDom = getDomSibling(oldVNode);\n\t\t}\n\t}\n\n\tnewParentVNode._dom = firstChildDom;\n\n\t// Remove remaining oldChildren if there are any.\n\tfor (i = oldChildrenLength; i--; ) {\n\t\tif (oldChildren[i] != null) {\n\t\t\tif (\n\t\t\t\ttypeof newParentVNode.type == 'function' &&\n\t\t\t\toldChildren[i]._dom != null &&\n\t\t\t\toldChildren[i]._dom == newParentVNode._nextDom\n\t\t\t) {\n\t\t\t\t// If the newParentVNode.__nextDom points to a dom node that is about to\n\t\t\t\t// be unmounted, then get the next sibling of that vnode and set\n\t\t\t\t// _nextDom to it\n\t\t\t\tnewParentVNode._nextDom = getDomSibling(oldParentVNode, i + 1);\n\t\t\t}\n\n\t\t\tunmount(oldChildren[i], oldChildren[i]);\n\t\t}\n\t}\n\n\t// Set refs only after unmount\n\tif (refs) {\n\t\tfor (i = 0; i < refs.length; i++) {\n\t\t\tapplyRef(refs[i], refs[++i], refs[++i]);\n\t\t}\n\t}\n}\n\nfunction reorderChildren(childVNode, oldDom, parentDom) {\n\t// Note: VNodes in nested suspended trees may be missing _children.\n\tlet c = childVNode._children;\n\tlet tmp = 0;\n\tfor (; c && tmp < c.length; tmp++) {\n\t\tlet vnode = c[tmp];\n\t\tif (vnode) {\n\t\t\t// We typically enter this code path on sCU bailout, where we copy\n\t\t\t// oldVNode._children to newVNode._children. If that is the case, we need\n\t\t\t// to update the old children's _parent pointer to point to the newVNode\n\t\t\t// (childVNode here).\n\t\t\tvnode._parent = childVNode;\n\n\t\t\tif (typeof vnode.type == 'function') {\n\t\t\t\toldDom = reorderChildren(vnode, oldDom, parentDom);\n\t\t\t} else {\n\t\t\t\toldDom = placeChild(\n\t\t\t\t\tparentDom,\n\t\t\t\t\tvnode,\n\t\t\t\t\tvnode,\n\t\t\t\t\tc,\n\t\t\t\t\tvnode._dom,\n\t\t\t\t\toldDom\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn oldDom;\n}\n\n/**\n * Flatten and loop through the children of a virtual node\n * @param {import('../index').ComponentChildren} children The unflattened\n * children of a virtual node\n * @returns {import('../internal').VNode[]}\n */\nexport function toChildArray(children, out) {\n\tout = out || [];\n\tif (children == null || typeof children == 'boolean') {\n\t} else if (Array.isArray(children)) {\n\t\tchildren.some(child => {\n\t\t\ttoChildArray(child, out);\n\t\t});\n\t} else {\n\t\tout.push(children);\n\t}\n\treturn out;\n}\n\nfunction placeChild(\n\tparentDom,\n\tchildVNode,\n\toldVNode,\n\toldChildren,\n\tnewDom,\n\toldDom\n) {\n\tlet nextDom;\n\tif (childVNode._nextDom !== undefined) {\n\t\t// Only Fragments or components that return Fragment like VNodes will\n\t\t// have a non-undefined _nextDom. Continue the diff from the sibling\n\t\t// of last DOM child of this child VNode\n\t\tnextDom = childVNode._nextDom;\n\n\t\t// Eagerly cleanup _nextDom. We don't need to persist the value because\n\t\t// it is only used by `diffChildren` to determine where to resume the diff after\n\t\t// diffing Components and Fragments. Once we store it the nextDOM local var, we\n\t\t// can clean up the property\n\t\tchildVNode._nextDom = undefined;\n\t} else if (\n\t\toldVNode == null ||\n\t\tnewDom != oldDom ||\n\t\tnewDom.parentNode == null\n\t) {\n\t\touter: if (oldDom == null || oldDom.parentNode !== parentDom) {\n\t\t\tparentDom.appendChild(newDom);\n\t\t\tnextDom = null;\n\t\t} else {\n\t\t\t// `j<oldChildrenLength; j+=2` is an alternative to `j++<oldChildrenLength/2`\n\t\t\tfor (\n\t\t\t\tlet sibDom = oldDom, j = 0;\n\t\t\t\t(sibDom = sibDom.nextSibling) && j < oldChildren.length;\n\t\t\t\tj += 2\n\t\t\t) {\n\t\t\t\tif (sibDom == newDom) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t}\n\t\t\tparentDom.insertBefore(newDom, oldDom);\n\t\t\tnextDom = oldDom;\n\t\t}\n\t}\n\n\t// If we have pre-calculated the nextDOM node, use it. Else calculate it now\n\t// Strictly check for `undefined` here cuz `null` is a valid value of `nextDom`.\n\t// See more detail in create-element.js:createVNode\n\tif (nextDom !== undefined) {\n\t\toldDom = nextDom;\n\t} else {\n\t\toldDom = newDom.nextSibling;\n\t}\n\n\treturn oldDom;\n}\n", "import { IS_NON_DIMENSIONAL } from '../constants';\nimport options from '../options';\n\n/**\n * Diff the old and new properties of a VNode and apply changes to the DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to apply\n * changes to\n * @param {object} newProps The new props\n * @param {object} oldProps The old props\n * @param {boolean} isSvg Whether or not this node is an SVG node\n * @param {boolean} hydrate Whether or not we are in hydration mode\n */\nexport function diffProps(dom, newProps, oldProps, isSvg, hydrate) {\n\tlet i;\n\n\tfor (i in oldProps) {\n\t\tif (i !== 'children' && i !== 'key' && !(i in newProps)) {\n\t\t\tsetProperty(dom, i, null, oldProps[i], isSvg);\n\t\t}\n\t}\n\n\tfor (i in newProps) {\n\t\tif (\n\t\t\t(!hydrate || typeof newProps[i] == 'function') &&\n\t\t\ti !== 'children' &&\n\t\t\ti !== 'key' &&\n\t\t\ti !== 'value' &&\n\t\t\ti !== 'checked' &&\n\t\t\toldProps[i] !== newProps[i]\n\t\t) {\n\t\t\tsetProperty(dom, i, newProps[i], oldProps[i], isSvg);\n\t\t}\n\t}\n}\n\nfunction setStyle(style, key, value) {\n\tif (key[0] === '-') {\n\t\tstyle.setProperty(key, value);\n\t} else if (value == null) {\n\t\tstyle[key] = '';\n\t} else if (typeof value != 'number' || IS_NON_DIMENSIONAL.test(key)) {\n\t\tstyle[key] = value;\n\t} else {\n\t\tstyle[key] = value + 'px';\n\t}\n}\n\n/**\n * Set a property value on a DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to modify\n * @param {string} name The name of the property to set\n * @param {*} value The value to set the property to\n * @param {*} oldValue The old value the property had\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node or not\n */\nexport function setProperty(dom, name, value, oldValue, isSvg) {\n\tlet useCapture;\n\n\to: if (name === 'style') {\n\t\tif (typeof value == 'string') {\n\t\t\tdom.style.cssText = value;\n\t\t} else {\n\t\t\tif (typeof oldValue == 'string') {\n\t\t\t\tdom.style.cssText = oldValue = '';\n\t\t\t}\n\n\t\t\tif (oldValue) {\n\t\t\t\tfor (name in oldValue) {\n\t\t\t\t\tif (!(value && name in value)) {\n\t\t\t\t\t\tsetStyle(dom.style, name, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (value) {\n\t\t\t\tfor (name in value) {\n\t\t\t\t\tif (!oldValue || value[name] !== oldValue[name]) {\n\t\t\t\t\t\tsetStyle(dom.style, name, value[name]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// Benchmark for comparison: https://esbench.com/bench/574c954bdb965b9a00965ac6\n\telse if (name[0] === 'o' && name[1] === 'n') {\n\t\tuseCapture = name !== (name = name.replace(/Capture$/, ''));\n\n\t\t// Infer correct casing for DOM built-in events:\n\t\tif (name.toLowerCase() in dom) name = name.toLowerCase().slice(2);\n\t\telse name = name.slice(2);\n\n\t\tif (!dom._listeners) dom._listeners = {};\n\t\tdom._listeners[name + useCapture] = value;\n\n\t\tif (value) {\n\t\t\tif (!oldValue) {\n\t\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\n\t\t\t\tdom.addEventListener(name, handler, useCapture);\n\t\t\t}\n\t\t} else {\n\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\n\t\t\tdom.removeEventListener(name, handler, useCapture);\n\t\t}\n\t} else if (name !== 'dangerouslySetInnerHTML') {\n\t\tif (isSvg) {\n\t\t\t// Normalize incorrect prop usage for SVG:\n\t\t\t// - xlink:href / xlinkHref --> href (xlink:href was removed from SVG and isn't needed)\n\t\t\t// - className --> class\n\t\t\tname = name.replace(/xlink(H|:h)/, 'h').replace(/sName$/, 's');\n\t\t} else if (\n\t\t\tname !== 'href' &&\n\t\t\tname !== 'list' &&\n\t\t\tname !== 'form' &&\n\t\t\t// Default value in browsers is `-1` and an empty string is\n\t\t\t// cast to `0` instead\n\t\t\tname !== 'tabIndex' &&\n\t\t\tname !== 'download' &&\n\t\t\tname in dom\n\t\t) {\n\t\t\ttry {\n\t\t\t\tdom[name] = value == null ? '' : value;\n\t\t\t\t// labelled break is 1b smaller here than a return statement (sorry)\n\t\t\t\tbreak o;\n\t\t\t} catch (e) {}\n\t\t}\n\n\t\t// ARIA-attributes have a different notion of boolean values.\n\t\t// The value `false` is different from the attribute not\n\t\t// existing on the DOM, so we can't remove it. For non-boolean\n\t\t// ARIA-attributes we could treat false as a removal, but the\n\t\t// amount of exceptions would cost us too many bytes. On top of\n\t\t// that other VDOM frameworks also always stringify `false`.\n\n\t\tif (typeof value === 'function') {\n\t\t\t// never serialize functions as attribute values\n\t\t} else if (\n\t\t\tvalue != null &&\n\t\t\t(value !== false || (name[0] === 'a' && name[1] === 'r'))\n\t\t) {\n\t\t\tdom.setAttribute(name, value);\n\t\t} else {\n\t\t\tdom.removeAttribute(name);\n\t\t}\n\t}\n}\n\n/**\n * Proxy an event to hooked event handlers\n * @param {Event} e The event object from the browser\n * @private\n */\nfunction eventProxy(e) {\n\tthis._listeners[e.type + false](options.event ? options.event(e) : e);\n}\n\nfunction eventProxyCapture(e) {\n\tthis._listeners[e.type + true](options.event ? options.event(e) : e);\n}\n", "import { EMPTY_OBJ } from '../constants';\nimport { Component, getDomSibling } from '../component';\nimport { Fragment } from '../create-element';\nimport { diffChildren } from './children';\nimport { diffProps, setProperty } from './props';\nimport { assign, removeNode, slice } from '../util';\nimport options from '../options';\n\n/**\n * Diff two virtual nodes and apply proper changes to the DOM\n * @param {import('../internal').PreactElement} parentDom The parent of the DOM element\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object. Modified by getChildContext\n * @param {boolean} isSvg Whether or not this element is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\n * element any new dom elements should be placed around. Likely `null` on first\n * render (except when hydrating). Can be a sibling DOM element when diffing\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} [isHydrating] Whether or not we are in hydration\n */\nexport function diff(\n\tparentDom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating\n) {\n\tlet tmp,\n\t\tnewType = newVNode.type;\n\n\t// When passing through createElement it assigns the object\n\t// constructor as undefined. This to prevent JSON-injection.\n\tif (newVNode.constructor !== undefined) return null;\n\n\t// If the previous diff bailed out, resume creating/hydrating.\n\tif (oldVNode._hydrating != null) {\n\t\tisHydrating = oldVNode._hydrating;\n\t\toldDom = newVNode._dom = oldVNode._dom;\n\t\t// if we resume, we want the tree to be \"unlocked\"\n\t\tnewVNode._hydrating = null;\n\t\texcessDomChildren = [oldDom];\n\t}\n\n\tif ((tmp = options._diff)) tmp(newVNode);\n\n\ttry {\n\t\touter: if (typeof newType == 'function') {\n\t\t\tlet c, isNew, oldProps, oldState, snapshot, clearProcessingException;\n\t\t\tlet newProps = newVNode.props;\n\n\t\t\t// Necessary for createContext api. Setting this property will pass\n\t\t\t// the context value as `this.context` just for this component.\n\t\t\ttmp = newType.contextType;\n\t\t\tlet provider = tmp && globalContext[tmp._id];\n\t\t\tlet componentContext = tmp\n\t\t\t\t? provider\n\t\t\t\t\t? provider.props.value\n\t\t\t\t\t: tmp._defaultValue\n\t\t\t\t: globalContext;\n\n\t\t\t// Get component and set it to `c`\n\t\t\tif (oldVNode._component) {\n\t\t\t\tc = newVNode._component = oldVNode._component;\n\t\t\t\tclearProcessingException = c._processingException = c._pendingError;\n\t\t\t} else {\n\t\t\t\t// Instantiate the new component\n\t\t\t\tif ('prototype' in newType && newType.prototype.render) {\n\t\t\t\t\t// @ts-ignore The check above verifies that newType is suppose to be constructed\n\t\t\t\t\tnewVNode._component = c = new newType(newProps, componentContext); // eslint-disable-line new-cap\n\t\t\t\t} else {\n\t\t\t\t\t// @ts-ignore Trust me, Component implements the interface we want\n\t\t\t\t\tnewVNode._component = c = new Component(newProps, componentContext);\n\t\t\t\t\tc.constructor = newType;\n\t\t\t\t\tc.render = doRender;\n\t\t\t\t}\n\t\t\t\tif (provider) provider.sub(c);\n\n\t\t\t\tc.props = newProps;\n\t\t\t\tif (!c.state) c.state = {};\n\t\t\t\tc.context = componentContext;\n\t\t\t\tc._globalContext = globalContext;\n\t\t\t\tisNew = c._dirty = true;\n\t\t\t\tc._renderCallbacks = [];\n\t\t\t}\n\n\t\t\t// Invoke getDerivedStateFromProps\n\t\t\tif (c._nextState == null) {\n\t\t\t\tc._nextState = c.state;\n\t\t\t}\n\t\t\tif (newType.getDerivedStateFromProps != null) {\n\t\t\t\tif (c._nextState == c.state) {\n\t\t\t\t\tc._nextState = assign({}, c._nextState);\n\t\t\t\t}\n\n\t\t\t\tassign(\n\t\t\t\t\tc._nextState,\n\t\t\t\t\tnewType.getDerivedStateFromProps(newProps, c._nextState)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\toldProps = c.props;\n\t\t\toldState = c.state;\n\n\t\t\t// Invoke pre-render lifecycle methods\n\t\t\tif (isNew) {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tc.componentWillMount != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillMount();\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidMount != null) {\n\t\t\t\t\tc._renderCallbacks.push(c.componentDidMount);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tnewProps !== oldProps &&\n\t\t\t\t\tc.componentWillReceiveProps != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillReceiveProps(newProps, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t(!c._force &&\n\t\t\t\t\t\tc.shouldComponentUpdate != null &&\n\t\t\t\t\t\tc.shouldComponentUpdate(\n\t\t\t\t\t\t\tnewProps,\n\t\t\t\t\t\t\tc._nextState,\n\t\t\t\t\t\t\tcomponentContext\n\t\t\t\t\t\t) === false) ||\n\t\t\t\t\tnewVNode._original === oldVNode._original\n\t\t\t\t) {\n\t\t\t\t\tc.props = newProps;\n\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t\t// More info about this here: https://gist.github.com/JoviDeCroock/bec5f2ce93544d2e6070ef8e0036e4e8\n\t\t\t\t\tif (newVNode._original !== oldVNode._original) c._dirty = false;\n\t\t\t\t\tc._vnode = newVNode;\n\t\t\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t\t\t\tnewVNode._children = oldVNode._children;\n\t\t\t\t\tnewVNode._children.forEach(vnode => {\n\t\t\t\t\t\tif (vnode) vnode._parent = newVNode;\n\t\t\t\t\t});\n\t\t\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\t\t\tcommitQueue.push(c);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\n\t\t\t\tif (c.componentWillUpdate != null) {\n\t\t\t\t\tc.componentWillUpdate(newProps, c._nextState, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidUpdate != null) {\n\t\t\t\t\tc._renderCallbacks.push(() => {\n\t\t\t\t\t\tc.componentDidUpdate(oldProps, oldState, snapshot);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tc.context = componentContext;\n\t\t\tc.props = newProps;\n\t\t\tc._vnode = newVNode;\n\t\t\tc._parentDom = parentDom;\n\n\t\t\tlet renderHook = options._render,\n\t\t\t\tcount = 0;\n\t\t\tif ('prototype' in newType && newType.prototype.render) {\n\t\t\t\tc.state = c._nextState;\n\t\t\t\tc._dirty = false;\n\n\t\t\t\tif (renderHook) renderHook(newVNode);\n\n\t\t\t\ttmp = c.render(c.props, c.state, c.context);\n\t\t\t} else {\n\t\t\t\tdo {\n\t\t\t\t\tc._dirty = false;\n\t\t\t\t\tif (renderHook) renderHook(newVNode);\n\n\t\t\t\t\ttmp = c.render(c.props, c.state, c.context);\n\n\t\t\t\t\t// Handle setState called in render, see #2553\n\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t} while (c._dirty && ++count < 25);\n\t\t\t}\n\n\t\t\t// Handle setState called in render, see #2553\n\t\t\tc.state = c._nextState;\n\n\t\t\tif (c.getChildContext != null) {\n\t\t\t\tglobalContext = assign(assign({}, globalContext), c.getChildContext());\n\t\t\t}\n\n\t\t\tif (!isNew && c.getSnapshotBeforeUpdate != null) {\n\t\t\t\tsnapshot = c.getSnapshotBeforeUpdate(oldProps, oldState);\n\t\t\t}\n\n\t\t\tlet isTopLevelFragment =\n\t\t\t\ttmp != null && tmp.type === Fragment && tmp.key == null;\n\t\t\tlet renderResult = isTopLevelFragment ? tmp.props.children : tmp;\n\n\t\t\tdiffChildren(\n\t\t\t\tparentDom,\n\t\t\t\tArray.isArray(renderResult) ? renderResult : [renderResult],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\toldDom,\n\t\t\t\tisHydrating\n\t\t\t);\n\n\t\t\tc.base = newVNode._dom;\n\n\t\t\t// We successfully rendered this VNode, unset any stored hydration/bailout state:\n\t\t\tnewVNode._hydrating = null;\n\n\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\tcommitQueue.push(c);\n\t\t\t}\n\n\t\t\tif (clearProcessingException) {\n\t\t\t\tc._pendingError = c._processingException = null;\n\t\t\t}\n\n\t\t\tc._force = false;\n\t\t} else if (\n\t\t\texcessDomChildren == null &&\n\t\t\tnewVNode._original === oldVNode._original\n\t\t) {\n\t\t\tnewVNode._children = oldVNode._children;\n\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t} else {\n\t\t\tnewVNode._dom = diffElementNodes(\n\t\t\t\toldVNode._dom,\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\tisHydrating\n\t\t\t);\n\t\t}\n\n\t\tif ((tmp = options.diffed)) tmp(newVNode);\n\t} catch (e) {\n\t\tnewVNode._original = null;\n\t\t// if hydrating or creating initial tree, bailout preserves DOM:\n\t\tif (isHydrating || excessDomChildren != null) {\n\t\t\tnewVNode._dom = oldDom;\n\t\t\tnewVNode._hydrating = !!isHydrating;\n\t\t\texcessDomChildren[excessDomChildren.indexOf(oldDom)] = null;\n\t\t\t// ^ could possibly be simplified to:\n\t\t\t// excessDomChildren.length = 0;\n\t\t}\n\t\toptions._catchError(e, newVNode, oldVNode);\n\t}\n}\n\n/**\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').VNode} root\n */\nexport function commitRoot(commitQueue, root) {\n\tif (options._commit) options._commit(root, commitQueue);\n\n\tcommitQueue.some(c => {\n\t\ttry {\n\t\t\t// @ts-ignore Reuse the commitQueue variable here so the type changes\n\t\t\tcommitQueue = c._renderCallbacks;\n\t\t\tc._renderCallbacks = [];\n\t\t\tcommitQueue.some(cb => {\n\t\t\t\t// @ts-ignore See above ts-ignore on commitQueue\n\t\t\t\tcb.call(c);\n\t\t\t});\n\t\t} catch (e) {\n\t\t\toptions._catchError(e, c._vnode);\n\t\t}\n\t});\n}\n\n/**\n * Diff two virtual nodes representing DOM element\n * @param {import('../internal').PreactElement} dom The DOM element representing\n * the virtual nodes being diffed\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {*} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @returns {import('../internal').PreactElement}\n */\nfunction diffElementNodes(\n\tdom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\tisHydrating\n) {\n\tlet oldProps = oldVNode.props;\n\tlet newProps = newVNode.props;\n\tlet nodeType = newVNode.type;\n\tlet i = 0;\n\n\t// Tracks entering and exiting SVG namespace when descending through the tree.\n\tif (nodeType === 'svg') isSvg = true;\n\n\tif (excessDomChildren != null) {\n\t\tfor (; i < excessDomChildren.length; i++) {\n\t\t\tconst child = excessDomChildren[i];\n\n\t\t\t// if newVNode matches an element in excessDomChildren or the `dom`\n\t\t\t// argument matches an element in excessDomChildren, remove it from\n\t\t\t// excessDomChildren so it isn't later removed in diffChildren\n\t\t\tif (\n\t\t\t\tchild &&\n\t\t\t\t'setAttribute' in child === !!nodeType &&\n\t\t\t\t(nodeType ? child.localName === nodeType : child.nodeType === 3)\n\t\t\t) {\n\t\t\t\tdom = child;\n\t\t\t\texcessDomChildren[i] = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (dom == null) {\n\t\tif (nodeType === null) {\n\t\t\t// @ts-ignore createTextNode returns Text, we expect PreactElement\n\t\t\treturn document.createTextNode(newProps);\n\t\t}\n\n\t\tif (isSvg) {\n\t\t\tdom = document.createElementNS(\n\t\t\t\t'http://www.w3.org/2000/svg',\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\n\t\t\t\tnodeType\n\t\t\t);\n\t\t} else {\n\t\t\tdom = document.createElement(\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\n\t\t\t\tnodeType,\n\t\t\t\tnewProps.is && newProps\n\t\t\t);\n\t\t}\n\n\t\t// we created a new parent, so none of the previously attached children can be reused:\n\t\texcessDomChildren = null;\n\t\t// we are creating a new node, so we can assume this is a new subtree (in case we are hydrating), this deopts the hydrate\n\t\tisHydrating = false;\n\t}\n\n\tif (nodeType === null) {\n\t\t// During hydration, we still have to split merged text from SSR'd HTML.\n\t\tif (oldProps !== newProps && (!isHydrating || dom.data !== newProps)) {\n\t\t\tdom.data = newProps;\n\t\t}\n\t} else {\n\t\t// If excessDomChildren was not null, repopulate it with the current element's children:\n\t\texcessDomChildren = excessDomChildren && slice.call(dom.childNodes);\n\n\t\toldProps = oldVNode.props || EMPTY_OBJ;\n\n\t\tlet oldHtml = oldProps.dangerouslySetInnerHTML;\n\t\tlet newHtml = newProps.dangerouslySetInnerHTML;\n\n\t\t// During hydration, props are not diffed at all (including dangerouslySetInnerHTML)\n\t\t// @TODO we should warn in debug mode when props don't match here.\n\t\tif (!isHydrating) {\n\t\t\t// But, if we are in a situation where we are using existing DOM (e.g. replaceNode)\n\t\t\t// we should read the existing DOM attributes to diff them\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\toldProps = {};\n\t\t\t\tfor (i = 0; i < dom.attributes.length; i++) {\n\t\t\t\t\toldProps[dom.attributes[i].name] = dom.attributes[i].value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (newHtml || oldHtml) {\n\t\t\t\t// Avoid re-applying the same '__html' if it did not changed between re-render\n\t\t\t\tif (\n\t\t\t\t\t!newHtml ||\n\t\t\t\t\t((!oldHtml || newHtml.__html != oldHtml.__html) &&\n\t\t\t\t\t\tnewHtml.__html !== dom.innerHTML)\n\t\t\t\t) {\n\t\t\t\t\tdom.innerHTML = (newHtml && newHtml.__html) || '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdiffProps(dom, newProps, oldProps, isSvg, isHydrating);\n\n\t\t// If the new vnode didn't have dangerouslySetInnerHTML, diff its children\n\t\tif (newHtml) {\n\t\t\tnewVNode._children = [];\n\t\t} else {\n\t\t\ti = newVNode.props.children;\n\t\t\tdiffChildren(\n\t\t\t\tdom,\n\t\t\t\tArray.isArray(i) ? i : [i],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg && nodeType !== 'foreignObject',\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\texcessDomChildren\n\t\t\t\t\t? excessDomChildren[0]\n\t\t\t\t\t: oldVNode._children && getDomSibling(oldVNode, 0),\n\t\t\t\tisHydrating\n\t\t\t);\n\n\t\t\t// Remove children that are not part of any vnode.\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\tfor (i = excessDomChildren.length; i--; ) {\n\t\t\t\t\tif (excessDomChildren[i] != null) removeNode(excessDomChildren[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (as above, don't diff props during hydration)\n\t\tif (!isHydrating) {\n\t\t\tif (\n\t\t\t\t'value' in newProps &&\n\t\t\t\t(i = newProps.value) !== undefined &&\n\t\t\t\t// #2756 For the <progress>-element the initial value is 0,\n\t\t\t\t// despite the attribute not being present. When the attribute\n\t\t\t\t// is missing the progress bar is treated as indeterminate.\n\t\t\t\t// To fix that we'll always update it when it is 0 for progress elements\n\t\t\t\t(i !== dom.value ||\n\t\t\t\t\t(nodeType === 'progress' && !i) ||\n\t\t\t\t\t// This is only for IE 11 to fix <select> value not being updated.\n\t\t\t\t\t// To avoid a stale select value we need to set the option.value\n\t\t\t\t\t// again, which triggers IE11 to re-evaluate the select value\n\t\t\t\t\t(nodeType === 'option' && i !== oldProps.value))\n\t\t\t) {\n\t\t\t\tsetProperty(dom, 'value', i, oldProps.value, false);\n\t\t\t}\n\t\t\tif (\n\t\t\t\t'checked' in newProps &&\n\t\t\t\t(i = newProps.checked) !== undefined &&\n\t\t\t\ti !== dom.checked\n\t\t\t) {\n\t\t\t\tsetProperty(dom, 'checked', i, oldProps.checked, false);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn dom;\n}\n\n/**\n * Invoke or update a ref, depending on whether it is a function or object ref.\n * @param {object|function} ref\n * @param {any} value\n * @param {import('../internal').VNode} vnode\n */\nexport function applyRef(ref, value, vnode) {\n\ttry {\n\t\tif (typeof ref == 'function') ref(value);\n\t\telse ref.current = value;\n\t} catch (e) {\n\t\toptions._catchError(e, vnode);\n\t}\n}\n\n/**\n * Unmount a virtual node from the tree and apply DOM changes\n * @param {import('../internal').VNode} vnode The virtual node to unmount\n * @param {import('../internal').VNode} parentVNode The parent of the VNode that\n * initiated the unmount\n * @param {boolean} [skipRemove] Flag that indicates that a parent node of the\n * current element is already detached from the DOM.\n */\nexport function unmount(vnode, parentVNode, skipRemove) {\n\tlet r;\n\tif (options.unmount) options.unmount(vnode);\n\n\tif ((r = vnode.ref)) {\n\t\tif (!r.current || r.current === vnode._dom) applyRef(r, null, parentVNode);\n\t}\n\n\tif ((r = vnode._component) != null) {\n\t\tif (r.componentWillUnmount) {\n\t\t\ttry {\n\t\t\t\tr.componentWillUnmount();\n\t\t\t} catch (e) {\n\t\t\t\toptions._catchError(e, parentVNode);\n\t\t\t}\n\t\t}\n\n\t\tr.base = r._parentDom = null;\n\t}\n\n\tif ((r = vnode._children)) {\n\t\tfor (let i = 0; i < r.length; i++) {\n\t\t\tif (r[i]) {\n\t\t\t\tunmount(r[i], parentVNode, typeof vnode.type != 'function');\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!skipRemove && vnode._dom != null) removeNode(vnode._dom);\n\n\t// Must be set to `undefined` to properly clean up `_nextDom`\n\t// for which `null` is a valid value. See comment in `create-element.js`\n\tvnode._dom = vnode._nextDom = undefined;\n}\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n\treturn this.constructor(props, context);\n}\n", "import { EMPTY_OBJ } from './constants';\nimport { commitRoot, diff } from './diff/index';\nimport { createElement, Fragment } from './create-element';\nimport options from './options';\nimport { slice } from './util';\n\n/**\n * Render a Preact virtual node into a DOM element\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * render into\n * @param {import('./internal').PreactElement | object} [replaceNode] Optional: Attempt to re-use an\n * existing DOM tree rooted at `replaceNode`\n */\nexport function render(vnode, parentDom, replaceNode) {\n\tif (options._root) options._root(vnode, parentDom);\n\n\t// We abuse the `replaceNode` parameter in `hydrate()` to signal if we are in\n\t// hydration mode or not by passing the `hydrate` function instead of a DOM\n\t// element..\n\tlet isHydrating = typeof replaceNode === 'function';\n\n\t// To be able to support calling `render()` multiple times on the same\n\t// DOM node, we need to obtain a reference to the previous tree. We do\n\t// this by assigning a new `_children` property to DOM nodes which points\n\t// to the last rendered tree. By default this property is not present, which\n\t// means that we are mounting a new tree for the first time.\n\tlet oldVNode = isHydrating\n\t\t? null\n\t\t: (replaceNode && replaceNode._children) || parentDom._children;\n\n\tvnode = (\n\t\t(!isHydrating && replaceNode) ||\n\t\tparentDom\n\t)._children = createElement(Fragment, null, [vnode]);\n\n\t// List of effects that need to be called after diffing.\n\tlet commitQueue = [];\n\tdiff(\n\t\tparentDom,\n\t\t// Determine the new vnode tree and store it on the DOM element on\n\t\t// our custom `_children` property.\n\t\tvnode,\n\t\toldVNode || EMPTY_OBJ,\n\t\tEMPTY_OBJ,\n\t\tparentDom.ownerSVGElement !== undefined,\n\t\t!isHydrating && replaceNode\n\t\t\t? [replaceNode]\n\t\t\t: oldVNode\n\t\t\t? null\n\t\t\t: parentDom.firstChild\n\t\t\t? slice.call(parentDom.childNodes)\n\t\t\t: null,\n\t\tcommitQueue,\n\t\t!isHydrating && replaceNode\n\t\t\t? replaceNode\n\t\t\t: oldVNode\n\t\t\t? oldVNode._dom\n\t\t\t: parentDom.firstChild,\n\t\tisHydrating\n\t);\n\n\t// Flush all queued effects\n\tcommitRoot(commitQueue, vnode);\n}\n\n/**\n * Update an existing DOM element with data from a Preact virtual node\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * update\n */\nexport function hydrate(vnode, parentDom) {\n\trender(vnode, parentDom, hydrate);\n}\n", "import { assign, slice } from './util';\nimport { createVNode } from './create-element';\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its children.\n * @param {import('./internal').VNode} vnode The virtual DOM element to clone\n * @param {object} props Attributes/props to add when cloning\n * @param {Array<import('./internal').ComponentChildren>} rest Any additional arguments will be used as replacement children.\n * @returns {import('./internal').VNode}\n */\nexport function cloneElement(vnode, props, children) {\n\tlet normalizedProps = assign({}, vnode.props),\n\t\tkey,\n\t\tref,\n\t\ti;\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse normalizedProps[i] = props[i];\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\treturn createVNode(\n\t\tvnode.type,\n\t\tnormalizedProps,\n\t\tkey || vnode.key,\n\t\tref || vnode.ref,\n\t\tnull\n\t);\n}\n", "/**\n * Find the closest error boundary to a thrown error and call it\n * @param {object} error The thrown value\n * @param {import('../internal').VNode} vnode The vnode that threw\n * the error that was caught (except for unmounting when this parameter\n * is the highest parent that was being unmounted)\n * @param {import('../internal').VNode} [oldVNode]\n * @param {import('../internal').ErrorInfo} [errorInfo]\n */\nexport function _catchError(error, vnode, oldVNode, errorInfo) {\n\t/** @type {import('../internal').Component} */\n\tlet component, ctor, handled;\n\n\tfor (; (vnode = vnode._parent); ) {\n\t\tif ((component = vnode._component) && !component._processingException) {\n\t\t\ttry {\n\t\t\t\tctor = component.constructor;\n\n\t\t\t\tif (ctor && ctor.getDerivedStateFromError != null) {\n\t\t\t\t\tcomponent.setState(ctor.getDerivedStateFromError(error));\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\tif (component.componentDidCatch != null) {\n\t\t\t\t\tcomponent.componentDidCatch(error, errorInfo || {});\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\t// This is an error boundary. Mark it as having bailed out, and whether it was mid-hydration.\n\t\t\t\tif (handled) {\n\t\t\t\t\treturn (component._pendingError = component);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\t\t}\n\t}\n\n\tthrow error;\n}\n", "import { h } from 'preact';\n\nfunction Header () {\n  return (\n    <div className=\"header\">\n      <span>ReactFast</span>\n\n      <nav>\n        <ul>\n          <li><a href=\"/\">Home</a></li>\n          <li><a href=\"/seo\">Seo</a></li>\n          <li><a href=\"/about\">About</a></li>\n          <li><a href=\"/not-found\">Not Found Page</a></li>\n          <li><a href=\"/dynamic\">Dynamic</a></li>\n        </ul>\n      </nav>\n    </div>\n  );\n}\n\nexport default Header;\n"],
  "mappings": "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",
  "names": ["slice", "options", "vnodeId", "isValidElement", "rerenderQueue", "prevDebounce", "i", "EMPTY_OBJ", "EMPTY_ARR", "IS_NON_DIMENSIONAL", "assign", "obj", "props", "removeNode", "node", "parentNode", "removeChild", "createElement", "type", "children", "key", "ref", "normalizedProps", "arguments", "length", "call", "defaultProps", "createVNode", "original", "vnode", "undefined", "constructor", "Fragment", "props", "children", "Component", "context", "getDomSibling", "vnode", "childIndex", "indexOf", "sibling", "length", "type", "updateParentDomPointers", "i", "child", "base", "enqueueRender", "c", "rerenderQueue", "push", "process", "prevDebounce", "options", "debounceRendering", "setTimeout", "queue", "sort", "a", "b", "some", "component", "commitQueue", "oldVNode", "oldDom", "parentDom", "assign", "diff", "ownerSVGElement", "commitRoot", "diffChildren", "renderResult", "newParentVNode", "oldParentVNode", "globalContext", "isSvg", "excessDomChildren", "isHydrating", "j", "childVNode", "newDom", "firstChildDom", "refs", "oldChildren", "EMPTY_ARR", "oldChildrenLength", "createVNode", "Array", "isArray", "key", "undefined", "EMPTY_OBJ", "ref", "reorderChildren", "placeChild", "parentNode", "unmount", "applyRef", "tmp", "placeChild", "parentDom", "childVNode", "oldVNode", "oldChildren", "newDom", "oldDom", "nextDom", "sibDom", "j", "parentNode", "outer", "appendChild", "nextSibling", "length", "insertBefore", "diffProps", "dom", "newProps", "oldProps", "isSvg", "hydrate", "i", "setProperty", "setStyle", "style", "key", "value", "IS_NON_DIMENSIONAL", "test", "name", "oldValue", "useCapture", "o", "cssText", "replace", "toLowerCase", "slice", "_listeners", "addEventListener", "eventProxyCapture", "eventProxy", "removeEventListener", "e", "setAttribute", "removeAttribute", "type", "options", "event", "diff", "newVNode", "globalContext", "excessDomChildren", "commitQueue", "isHydrating", "tmp", "c", "isNew", "oldState", "snapshot", "clearProcessingException", "provider", "componentContext", "renderHook", "count", "renderResult", "newType", "constructor", "props", "contextType", "prototype", "render", "Component", "doRender", "sub", "state", "context", "getDerivedStateFromProps", "assign", "componentWillMount", "componentDidMount", "push", "componentWillReceiveProps", "shouldComponentUpdate", "forEach", "vnode", "componentWillUpdate", "componentDidUpdate", "getChildContext", "getSnapshotBeforeUpdate", "Fragment", "children", "diffChildren", "Array", "isArray", "base", "diffElementNodes", "diffed", "indexOf", "commitRoot", "root", "some", "cb", "call", "child", "oldHtml", "newHtml", "nodeType", "localName", "document", "createTextNode", "createElementNS", "createElement", "is", "data", "childNodes", "EMPTY_OBJ", "dangerouslySetInnerHTML", "attributes", "innerHTML", "getDomSibling", "removeNode", "checked", "applyRef", "ref", "current", "unmount", "parentVNode", "skipRemove", "r", "componentWillUnmount", "undefined", "this", "replaceNode", "ownerSVGElement", "firstChild", "slice", "EMPTY_ARR", "options", "error", "vnode", "oldVNode", "errorInfo", "component", "ctor", "handled", "constructor", "getDerivedStateFromError", "setState", "componentDidCatch", "e", "vnodeId", "isValidElement", "Component", "prototype", "update", "callback", "s", "this", "state", "assign", "props", "push", "enqueueRender", "forceUpdate", "render", "Fragment", "rerenderQueue", "process", "i", "Header", "h", "Header_default"]
}
