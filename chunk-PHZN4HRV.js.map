{
  "version": 3,
  "sources": ["../node_modules/preact/hooks/src/index.js"],
  "sourcesContent": ["import { options } from 'preact';\n\n/** @type {number} */\nlet currentIndex;\n\n/** @type {import('./internal').Component} */\nlet currentComponent;\n\n/** @type {import('./internal').Component} */\nlet previousComponent;\n\n/** @type {number} */\nlet currentHook = 0;\n\n/** @type {Array<import('./internal').Component>} */\nlet afterPaintEffects = [];\n\nlet EMPTY = [];\n\nlet oldBeforeDiff = options._diff;\nlet oldBeforeRender = options._render;\nlet oldAfterDiff = options.diffed;\nlet oldCommit = options._commit;\nlet oldBeforeUnmount = options.unmount;\n\nconst RAF_TIMEOUT = 100;\nlet prevRaf;\n\noptions._diff = vnode => {\n\tcurrentComponent = null;\n\tif (oldBeforeDiff) oldBeforeDiff(vnode);\n};\n\noptions._render = vnode => {\n\tif (oldBeforeRender) oldBeforeRender(vnode);\n\n\tcurrentComponent = vnode._component;\n\tcurrentIndex = 0;\n\n\tconst hooks = currentComponent.__hooks;\n\tif (hooks) {\n\t\tif (previousComponent === currentComponent) {\n\t\t\thooks._pendingEffects = [];\n\t\t\tcurrentComponent._renderCallbacks = [];\n\t\t\thooks._list.forEach(hookItem => {\n\t\t\t\tif (hookItem._nextValue) {\n\t\t\t\t\thookItem._value = hookItem._nextValue;\n\t\t\t\t}\n\t\t\t\thookItem._pendingValue = EMPTY;\n\t\t\t\thookItem._nextValue = hookItem._pendingArgs = undefined;\n\t\t\t});\n\t\t} else {\n\t\t\thooks._pendingEffects.forEach(invokeCleanup);\n\t\t\thooks._pendingEffects.forEach(invokeEffect);\n\t\t\thooks._pendingEffects = [];\n\t\t}\n\t}\n\tpreviousComponent = currentComponent;\n};\n\noptions.diffed = vnode => {\n\tif (oldAfterDiff) oldAfterDiff(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks) {\n\t\tif (c.__hooks._pendingEffects.length) afterPaint(afterPaintEffects.push(c));\n\t\tc.__hooks._list.forEach(hookItem => {\n\t\t\tif (hookItem._pendingArgs) {\n\t\t\t\thookItem._args = hookItem._pendingArgs;\n\t\t\t}\n\t\t\tif (hookItem._pendingValue !== EMPTY) {\n\t\t\t\thookItem._value = hookItem._pendingValue;\n\t\t\t}\n\t\t\thookItem._pendingArgs = undefined;\n\t\t\thookItem._pendingValue = EMPTY;\n\t\t});\n\t}\n\tpreviousComponent = currentComponent = null;\n};\n\noptions._commit = (vnode, commitQueue) => {\n\tcommitQueue.some(component => {\n\t\ttry {\n\t\t\tcomponent._renderCallbacks.forEach(invokeCleanup);\n\t\t\tcomponent._renderCallbacks = component._renderCallbacks.filter(cb =>\n\t\t\t\tcb._value ? invokeEffect(cb) : true\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tcommitQueue.some(c => {\n\t\t\t\tif (c._renderCallbacks) c._renderCallbacks = [];\n\t\t\t});\n\t\t\tcommitQueue = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t});\n\n\tif (oldCommit) oldCommit(vnode, commitQueue);\n};\n\noptions.unmount = vnode => {\n\tif (oldBeforeUnmount) oldBeforeUnmount(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks) {\n\t\tlet hasErrored;\n\t\tc.__hooks._list.forEach(s => {\n\t\t\ttry {\n\t\t\t\tinvokeCleanup(s);\n\t\t\t} catch (e) {\n\t\t\t\thasErrored = e;\n\t\t\t}\n\t\t});\n\t\tif (hasErrored) options._catchError(hasErrored, c._vnode);\n\t}\n};\n\n/**\n * Get a hook's state from the currentComponent\n * @param {number} index The index of the hook to get\n * @param {number} type The index of the hook to get\n * @returns {any}\n */\nfunction getHookState(index, type) {\n\tif (options._hook) {\n\t\toptions._hook(currentComponent, index, currentHook || type);\n\t}\n\tcurrentHook = 0;\n\n\t// Largely inspired by:\n\t// * https://github.com/michael-klein/funcy.js/blob/f6be73468e6ec46b0ff5aa3cc4c9baf72a29025a/src/hooks/core_hooks.mjs\n\t// * https://github.com/michael-klein/funcy.js/blob/650beaa58c43c33a74820a3c98b3c7079cf2e333/src/renderer.mjs\n\t// Other implementations to look at:\n\t// * https://codesandbox.io/s/mnox05qp8\n\tconst hooks =\n\t\tcurrentComponent.__hooks ||\n\t\t(currentComponent.__hooks = {\n\t\t\t_list: [],\n\t\t\t_pendingEffects: []\n\t\t});\n\n\tif (index >= hooks._list.length) {\n\t\thooks._list.push({ _pendingValue: EMPTY });\n\t}\n\treturn hooks._list[index];\n}\n\n/**\n * @param {import('./index').StateUpdater<any>} [initialState]\n */\nexport function useState(initialState) {\n\tcurrentHook = 1;\n\treturn useReducer(invokeOrReturn, initialState);\n}\n\n/**\n * @param {import('./index').Reducer<any, any>} reducer\n * @param {import('./index').StateUpdater<any>} initialState\n * @param {(initialState: any) => void} [init]\n * @returns {[ any, (state: any) => void ]}\n */\nexport function useReducer(reducer, initialState, init) {\n\t/** @type {import('./internal').ReducerHookState} */\n\tconst hookState = getHookState(currentIndex++, 2);\n\thookState._reducer = reducer;\n\tif (!hookState._component) {\n\t\thookState._value = [\n\t\t\t!init ? invokeOrReturn(undefined, initialState) : init(initialState),\n\n\t\t\taction => {\n\t\t\t\tconst currentValue = hookState._nextValue\n\t\t\t\t\t? hookState._nextValue[0]\n\t\t\t\t\t: hookState._value[0];\n\t\t\t\tconst nextValue = hookState._reducer(currentValue, action);\n\n\t\t\t\tif (currentValue !== nextValue) {\n\t\t\t\t\thookState._nextValue = [nextValue, hookState._value[1]];\n\t\t\t\t\thookState._component.setState({});\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\n\t\thookState._component = currentComponent;\n\n\t\tif (!currentComponent._hasScuFromHooks) {\n\t\t\tcurrentComponent._hasScuFromHooks = true;\n\t\t\tconst prevScu = currentComponent.shouldComponentUpdate;\n\n\t\t\t// This SCU has the purpose of bailing out after repeated updates\n\t\t\t// to stateful hooks.\n\t\t\t// we store the next value in _nextValue[0] and keep doing that for all\n\t\t\t// state setters, if we have next states and\n\t\t\t// all next states within a component end up being equal to their original state\n\t\t\t// we are safe to bail out for this specific component.\n\t\t\tcurrentComponent.shouldComponentUpdate = function(p, s, c) {\n\t\t\t\tif (!hookState._component.__hooks) return true;\n\n\t\t\t\tconst stateHooks = hookState._component.__hooks._list.filter(\n\t\t\t\t\tx => x._component\n\t\t\t\t);\n\t\t\t\tconst allHooksEmpty = stateHooks.every(x => !x._nextValue);\n\t\t\t\t// When we have no updated hooks in the component we invoke the previous SCU or\n\t\t\t\t// traverse the VDOM tree further.\n\t\t\t\tif (allHooksEmpty) {\n\t\t\t\t\treturn prevScu ? prevScu.call(this, p, s, c) : true;\n\t\t\t\t}\n\n\t\t\t\t// We check whether we have components with a nextValue set that\n\t\t\t\t// have values that aren't equal to one another this pushes\n\t\t\t\t// us to update further down the tree\n\t\t\t\tlet shouldUpdate = false;\n\t\t\t\tstateHooks.forEach(hookItem => {\n\t\t\t\t\tif (hookItem._nextValue) {\n\t\t\t\t\t\tconst currentValue = hookItem._value[0];\n\t\t\t\t\t\thookItem._value = hookItem._nextValue;\n\t\t\t\t\t\thookItem._nextValue = undefined;\n\t\t\t\t\t\tif (currentValue !== hookItem._value[0]) shouldUpdate = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn shouldUpdate\n\t\t\t\t\t? prevScu\n\t\t\t\t\t\t? prevScu.call(this, p, s, c)\n\t\t\t\t\t\t: true\n\t\t\t\t\t: false;\n\t\t\t};\n\t\t}\n\t}\n\n\treturn hookState._nextValue || hookState._value;\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 3);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._pendingArgs = args;\n\n\t\tcurrentComponent.__hooks._pendingEffects.push(state);\n\t}\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useLayoutEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 4);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._pendingArgs = args;\n\n\t\tcurrentComponent._renderCallbacks.push(state);\n\t}\n}\n\nexport function useRef(initialValue) {\n\tcurrentHook = 5;\n\treturn useMemo(() => ({ current: initialValue }), []);\n}\n\n/**\n * @param {object} ref\n * @param {() => object} createHandle\n * @param {any[]} args\n */\nexport function useImperativeHandle(ref, createHandle, args) {\n\tcurrentHook = 6;\n\tuseLayoutEffect(\n\t\t() => {\n\t\t\tif (typeof ref == 'function') {\n\t\t\t\tref(createHandle());\n\t\t\t\treturn () => ref(null);\n\t\t\t} else if (ref) {\n\t\t\t\tref.current = createHandle();\n\t\t\t\treturn () => (ref.current = null);\n\t\t\t}\n\t\t},\n\t\targs == null ? args : args.concat(ref)\n\t);\n}\n\n/**\n * @param {() => any} factory\n * @param {any[]} args\n */\nexport function useMemo(factory, args) {\n\t/** @type {import('./internal').MemoHookState} */\n\tconst state = getHookState(currentIndex++, 7);\n\tif (argsChanged(state._args, args)) {\n\t\tstate._pendingValue = factory();\n\t\tstate._pendingArgs = args;\n\t\tstate._factory = factory;\n\t\treturn state._pendingValue;\n\t}\n\n\treturn state._value;\n}\n\n/**\n * @param {() => void} callback\n * @param {any[]} args\n */\nexport function useCallback(callback, args) {\n\tcurrentHook = 8;\n\treturn useMemo(() => callback, args);\n}\n\n/**\n * @param {import('./internal').PreactContext} context\n */\nexport function useContext(context) {\n\tconst provider = currentComponent.context[context._id];\n\t// We could skip this call here, but than we'd not call\n\t// `options._hook`. We need to do that in order to make\n\t// the devtools aware of this hook.\n\t/** @type {import('./internal').ContextHookState} */\n\tconst state = getHookState(currentIndex++, 9);\n\t// The devtools needs access to the context object to\n\t// be able to pull of the default value when no provider\n\t// is present in the tree.\n\tstate._context = context;\n\tif (!provider) return context._defaultValue;\n\t// This is probably not safe to convert to \"!\"\n\tif (state._value == null) {\n\t\tstate._value = true;\n\t\tprovider.sub(currentComponent);\n\t}\n\treturn provider.props.value;\n}\n\n/**\n * Display a custom label for a custom hook for the devtools panel\n * @type {<T>(value: T, cb?: (value: T) => string | number) => void}\n */\nexport function useDebugValue(value, formatter) {\n\tif (options.useDebugValue) {\n\t\toptions.useDebugValue(formatter ? formatter(value) : value);\n\t}\n}\n\n/**\n * @param {(error: any) => void} cb\n */\nexport function useErrorBoundary(cb) {\n\t/** @type {import('./internal').ErrorBoundaryHookState} */\n\tconst state = getHookState(currentIndex++, 10);\n\tconst errState = useState();\n\tstate._value = cb;\n\tif (!currentComponent.componentDidCatch) {\n\t\tcurrentComponent.componentDidCatch = err => {\n\t\t\tif (state._value) state._value(err);\n\t\t\terrState[1](err);\n\t\t};\n\t}\n\treturn [\n\t\terrState[0],\n\t\t() => {\n\t\t\terrState[1](undefined);\n\t\t}\n\t];\n}\n\n/**\n * After paint effects consumer.\n */\nfunction flushAfterPaintEffects() {\n\tlet component;\n\twhile ((component = afterPaintEffects.shift())) {\n\t\tif (!component._parentDom || !component.__hooks) continue;\n\t\ttry {\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeCleanup);\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeEffect);\n\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t} catch (e) {\n\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t}\n}\n\nlet HAS_RAF = typeof requestAnimationFrame == 'function';\n\n/**\n * Schedule a callback to be invoked after the browser has a chance to paint a new frame.\n * Do this by combining requestAnimationFrame (rAF) + setTimeout to invoke a callback after\n * the next browser frame.\n *\n * Also, schedule a timeout in parallel to the the rAF to ensure the callback is invoked\n * even if RAF doesn't fire (for example if the browser tab is not visible)\n *\n * @param {() => void} callback\n */\nfunction afterNextFrame(callback) {\n\tconst done = () => {\n\t\tclearTimeout(timeout);\n\t\tif (HAS_RAF) cancelAnimationFrame(raf);\n\t\tsetTimeout(callback);\n\t};\n\tconst timeout = setTimeout(done, RAF_TIMEOUT);\n\n\tlet raf;\n\tif (HAS_RAF) {\n\t\traf = requestAnimationFrame(done);\n\t}\n}\n\n// Note: if someone used options.debounceRendering = requestAnimationFrame,\n// then effects will ALWAYS run on the NEXT frame instead of the current one, incurring a ~16ms delay.\n// Perhaps this is not such a big deal.\n/**\n * Schedule afterPaintEffects flush after the browser paints\n * @param {number} newQueueLength\n */\nfunction afterPaint(newQueueLength) {\n\tif (newQueueLength === 1 || prevRaf !== options.requestAnimationFrame) {\n\t\tprevRaf = options.requestAnimationFrame;\n\t\t(prevRaf || afterNextFrame)(flushAfterPaintEffects);\n\t}\n}\n\n/**\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeCleanup(hook) {\n\t// A hook cleanup can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\tlet cleanup = hook._cleanup;\n\tif (typeof cleanup == 'function') {\n\t\thook._cleanup = undefined;\n\t\tcleanup();\n\t}\n\n\tcurrentComponent = comp;\n}\n\n/**\n * Invoke a Hook's effect\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeEffect(hook) {\n\t// A hook call can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\thook._cleanup = hook._value();\n\tcurrentComponent = comp;\n}\n\n/**\n * @param {any[]} oldArgs\n * @param {any[]} newArgs\n */\nfunction argsChanged(oldArgs, newArgs) {\n\treturn (\n\t\t!oldArgs ||\n\t\toldArgs.length !== newArgs.length ||\n\t\tnewArgs.some((arg, index) => arg !== oldArgs[index])\n\t);\n}\n\nfunction invokeOrReturn(arg, f) {\n\treturn typeof f == 'function' ? f(arg) : f;\n}\n"],
  "mappings": "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",
  "names": ["currentIndex", "currentComponent", "previousComponent", "prevRaf", "currentHook", "afterPaintEffects", "EMPTY", "oldBeforeDiff", "options", "oldBeforeRender", "oldAfterDiff", "diffed", "oldCommit", "oldBeforeUnmount", "unmount", "getHookState", "index", "type", "hooks", "length", "push", "useState", "initialState", "useReducer", "invokeOrReturn", "reducer", "init", "hookState", "_reducer", "action", "currentValue", "nextValue", "setState", "_hasScuFromHooks", "prevScu", "shouldComponentUpdate", "p", "s", "c", "stateHooks", "filter", "x", "every", "call", "this", "shouldUpdate", "forEach", "hookItem", "useEffect", "callback", "args", "state", "argsChanged", "_pendingArgs", "flushAfterPaintEffects", "component", "afterPaintEffects", "shift", "forEach", "invokeCleanup", "invokeEffect", "e", "options", "vnode", "currentComponent", "oldBeforeDiff", "oldBeforeRender", "currentIndex", "hooks", "previousComponent", "hookItem", "EMPTY", "_pendingArgs", "undefined", "diffed", "oldAfterDiff", "c", "length", "push", "prevRaf", "requestAnimationFrame", "callback", "raf", "done", "clearTimeout", "timeout", "HAS_RAF", "cancelAnimationFrame", "setTimeout", "commitQueue", "some", "filter", "cb", "oldCommit", "unmount", "oldBeforeUnmount", "hasErrored", "s", "hook", "comp", "cleanup", "argsChanged", "oldArgs", "newArgs", "arg", "index", "invokeOrReturn", "f"]
}
